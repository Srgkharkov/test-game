openapi: 3.1.0
info:
  title: Swagger Test Game - OpenAPI 3.1
  # description: |-
  #   This is a sample Pet Store Server based on the OpenAPI 3.1 specification.  You can find out more about
  #   Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
  #   You can now help us improve the API whether it's by making changes to the definition itself or to the code.
  #   That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  #   Some useful links:
  #   - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
  #   - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

  # termsOfService: http://swagger.io/terms/
  contact:
    email: srgkharkov@gmail.com
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
# servers:
#   - url: https://petstore3.swagger.io/api/v3
tags:
  - name: configs
    description: Upload configs
  - name: result
    description: Get result
  - name: metrics
    description: Метрические данные в формате prometheus
paths:
  /addconfig:
    post:
      tags:
        - configs
      summary: Add a new config
      description: Add a new config
      operationId: addConfig
      requestBody:
        description: Create a new config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
          application/xml:
            schema:
              $ref: '#/components/schemas/Config'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Config'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '405':
          description: Invalid input
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /getresult:
    get:
      tags:
        - result
      summary: Returns result by reels, lines and payouts configs
      description: Returns a JSON with payouts for every lines and total
      operationId: getResult
      parameters:
        - name: conf_reel_name
          in: query
          description: Name of reel config
          required: true
          schema:
            type: string
        - name: conf_line_name
          in: query
          description: Name of line config
          required: true
          schema:
            type: string
        - name: conf_payout_name
          in: query
          description: Name of payout config
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
      # security:
      #   - api_key: []
  /metrics:
    get:
      tags:
        - metrics
      summary: Returns result by reels, lines and payouts configs
      description: Returns a JSON with payouts for every lines and total
      operationId: getMetrics
      parameters:
      # - name: conf_reel_name
      #   in: query
      #   description: Name of reel config
      #   required: true
      #   schema:
      #     type: string
      # - name: conf_line_name
      #   in: query
      #   description: Name of line config
      #   required: true
      #   schema:
      #     type: string
      # - name: conf_payout_name
      #   in: query
      #   description: Name of payout config
      #   required: true
      #   schema:
      #     type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
            # schema:
            #   $ref: '#/components/schemas/Result'
      # security:
      #   - api_key: []
components:
  schemas:
    Config:
      required:
        - name
        - type
        - JSON
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        name:
          type: string
          examples: [conf_1]
        type:
          type: string
          examples: [reels]
          enum:
            - reels
            - lines
            - payouts
        JSON:
          type: string
          examples: [conf_1]
      xml:
        name: config
    ApiResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
      xml:
        name: '##default'
    Result:
      type: object
      properties:
        id:
          type: integer
          format: int64
        JSON:
          type: string
      xml:
        name: result
    # RequestResult:
    #   required:
    #     - conf_reel_name
    #     - conf_line_name
    #     - conf_payout_name
    #   type: object
    #   properties:
    #     conf_reel_name:
    #       type: string
    #     conf_line_name:
    #       type: string
    #     conf_payout_name:
    #       type: string
    #   xml:
    #     name: requestresult
  requestBodies:
    Config:
      description: Config object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Config'
        application/xml:
          schema:
            $ref: '#/components/schemas/Config'